using System;

// This is the board for the game
public class TicTacToeBoard
{
    // This is the board itself, a grid of characters
    private char[,] board;
    // This is the size of the board (3x3 for normal tic-tac-toe)
    private int size;

    // This is like the board's "constructor", it sets up the board when it's made
    public TicTacToeBoard(int size)
    {
        // This sets the size of the board
        this.size = size;
        // This makes the board, a grid of characters
        board = new char[size, size];
        // This makes all the spaces on the board empty
        InitializeBoard();
    }

    // This fills all the spaces on the board with empty spaces
    private void InitializeBoard()
    {
        // It goes through each row
        for (int i = 0; i < size; i++)
        {
            // It goes through each column in the row
            for (int j = 0; j < size; j++)
            {
                // It sets the space on the board to an empty space
                board[i, j] = ' ';
            }
        }
    }

    // This puts a mark (X or O) on the board
    public void PlaceMark(int row, int col, char mark)
    {
        // If the move is allowed
        if (IsValidMove(row, col))
        {
            // Put the mark on the board
            board[row, col] = mark;
        }
        else
        {
            // Tell the player it's an invalid move
            Console.WriteLine("Invalid move. Try again.");
        }
    }

    // This checks if a move is allowed
    public bool IsValidMove(int row, int col)
    {
        // It checks if the row and column are within the board
        return (row >= 0 && row < size && col >= 0 && col < size && board[row, col] == ' ');
    }

    // This gets the mark (X or O) at a certain space on the board
    public char GetMark(int row, int col)
    {
        // It returns the mark at that space
        return board[row, col];
    }

    // This prints the board so the player can see it
    public void PrintBoard()
    {
        // It prints the numbers for the columns
        Console.WriteLine("  0 1 2");
        // It goes through each row
        for (int i = 0; i < size; i++)
        {
            // It prints the number for the row
            Console.Write(i + " ");
            // It goes through each column in the row
            for (int j = 0; j < size; j++)
            {
                // It prints the mark at that space
                Console.Write(board[i, j] + " ");
            }
            // It goes to the next line
            Console.WriteLine();
        }
    }
}

// This is the class that controls the game
public class TicTacToeGame
{
    // This is the board for the game
    private TicTacToeBoard board;
    // This is the player whose turn it is (X or O)
    private char currentPlayer;
    // This tells if the game is still going on
    private bool gameRunning;

    // This is like the game's "constructor", it sets up the game when it's made
    public TicTacToeGame(int size)
    {
        // It makes the board
        board = new TicTacToeBoard(size);
        // It sets the first player to X
        currentPlayer = 'X';
        // It starts the game
        gameRunning = true;
    }

    // This is the main part of the game, it keeps going until someone wins or it's a draw
    public void Play()
    {
        // This keeps going while the game is still going on
        while (gameRunning)
        {
            // It prints the board so the player can see it
            board.PrintBoard();
            // It tells the player whose turn it is
            Console.WriteLine($"Player {currentPlayer}'s turn:");
            // It gets the player's move
            GetPlayerMove();
            // It checks if someone won
            if (CheckWin())
            {
                // If someone won, it tells the player who won and ends the game
                Console.WriteLine($"Player {currentPlayer} wins!");
                gameRunning = false;
            }
            // It checks if it's a draw
            else if (CheckDraw())
            {
                // If it's a draw, it tells the player and ends the game
                Console.WriteLine("It's a draw!");
                gameRunning = false;
            }
            else
            {
                // If no one won and it's not a draw, it switches to the other player
                SwitchPlayer();
            }
        }
    }

    // This gets the player's move
    private void GetPlayerMove()
    {
        int row, col;
        // This keeps going until the player enters a valid move
        while (true)
        {
            // It asks the player for the row
            Console.Write("Enter row (0-2): ");
            // It gets the row from the player
            row = int.Parse(Console.ReadLine());
            // It asks the player for the column
            Console.Write("Enter column (0-2): ");
            // It gets the column from the player
            col = int.Parse(Console.ReadLine());
            // If the move is allowed
            if (board.IsValidMove(row, col))
            {
                // It breaks out of the loop
                break;
            }
            // If the move is not allowed, it tells the player to try again
            Console.WriteLine("Invalid move. Try again.");
        }
        // It puts the mark on the board
        board.PlaceMark(row, col, currentPlayer);
    }

    // This checks if someone won
    private bool CheckWin()
    {
        // It checks if any row has the same mark
        for (int i = 0; i < board.size; i++)
        {
            if (board.GetMark(i, 0) == currentPlayer &&
                board.GetMark(i, 1) == currentPlayer &&
                board.GetMark(i, 2) == currentPlayer)
            {
                // If a row has the same mark, it means someone won
                return true;
            }
        }

        // It checks if any column has the same mark
        for (int j = 0; j < board.size; j++)
        {
            if (board.GetMark(0, j) == currentPlayer &&
                board.GetMark(1, j) == currentPlayer &&
                board.GetMark(2, j) == currentPlayer)
            {
                // If a column has the same mark, it means someone won
                return true;
            }
        }

        // It checks if the diagonal from top-left to bottom-right has the same mark
        if (board.GetMark(0, 0) == currentPlayer &&
            board.GetMark(1, 1) == currentPlayer &&
            board.GetMark(2, 2) == currentPlayer)
        {
            // If the diagonal has the same mark, it means someone won
            return true;
        }

        // It checks if the diagonal from top-right to bottom-left has the same mark
        if (board.GetMark(0, 2) == currentPlayer &&
            board.GetMark(1, 1) == currentPlayer &&
            board.GetMark(2, 0) == currentPlayer)
        {
            // If the diagonal has the same mark, it means someone won
            return true;
        }

        // If none of the checks found a win, it means no one won yet
        return false;
    }

    // This checks if the game is a draw
    private bool CheckDraw()
    {
        // It goes through each space on the board
        for (int i = 0; i < board.size; i++)
        {
            for (int j = 0; j < board.size; j++)
            {
                // If there's an empty space
                if (board.GetMark(i, j) == ' ')
                {
                    // It means the game is not a draw yet
                    return false;
                }
            }
        }
        // If there are no empty spaces, it means the game is a draw
        return true;
    }

    // This switches to the other player
    private void SwitchPlayer()
    {
        // If the current player is X, it switches to O
        if (currentPlayer == 'X')
        {
            currentPlayer = 'O';
        }
        // If the current player is O, it switches to X
        else
        {
            currentPlayer = 'X';
        }
    }
}

// This is the main part of the program
class Program
{
    static void Main(string[] args)
    {
        // It makes a new game with a 3x3 board
        TicTacToeGame game = new TicTacToeGame(3);
        // It starts the game
        game.Play();
    }
}
